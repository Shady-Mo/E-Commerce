// <auto-generated />
using System;
using DataBase.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Project.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250513232053_test1.1")]
    partial class test11
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Project.Data.Relation.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("colorId")
                        .HasColumnType("int");

                    b.Property<string>("customerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.Property<int>("sizeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("colorId");

                    b.HasIndex("customerId");

                    b.HasIndex("productId");

                    b.HasIndex("sizeId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Project.Data.Relation.EditCustomer", b =>
                {
                    b.Property<string>("adminId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("customerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EditDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("adminId", "customerId");

                    b.HasIndex("customerId");

                    b.ToTable("EditCustomers");
                });

            modelBuilder.Entity("Project.Data.Relation.EditDelivery", b =>
                {
                    b.Property<string>("adminId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("deliveryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EditDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("adminId", "deliveryId");

                    b.HasIndex("deliveryId");

                    b.ToTable("EditDeliveries");
                });

            modelBuilder.Entity("Project.Data.Relation.EditMerchant", b =>
                {
                    b.Property<string>("adminId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("merchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EditDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("adminId", "merchantId");

                    b.HasIndex("merchantId");

                    b.ToTable("EditMerchants");
                });

            modelBuilder.Entity("Project.Data.Relation.EditOrder", b =>
                {
                    b.Property<string>("adminId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("orderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<bool>("LocationChange")
                        .HasColumnType("bit");

                    b.Property<bool>("PhoneChange")
                        .HasColumnType("bit");

                    b.HasKey("adminId", "orderId");

                    b.HasIndex("orderId");

                    b.ToTable("EditOrders");
                });

            modelBuilder.Entity("Project.Data.Relation.FavMerchant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("customerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("merchantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("customerId");

                    b.HasIndex("merchantId");

                    b.ToTable("FavMerchants");
                });

            modelBuilder.Entity("Project.Data.Relation.FavProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("customerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("customerId");

                    b.HasIndex("productId");

                    b.ToTable("FavProducts");
                });

            modelBuilder.Entity("Project.Data.Relation.Feedback", b =>
                {
                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.Property<string>("customerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Star")
                        .HasColumnType("int");

                    b.HasKey("productId", "customerId");

                    b.HasIndex("customerId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Project.Data.Relation.FeedbackComments", b =>
                {
                    b.Property<string>("customerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.Property<string>("OriginalComment")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("CommentRate")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("TranslateComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("customerId", "productId", "OriginalComment");

                    b.HasIndex("productId");

                    b.ToTable("FeedbackComments");
                });

            modelBuilder.Entity("Project.Data.Relation.History", b =>
                {
                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.Property<string>("customerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("event_type")
                        .HasColumnType("int");

                    b.HasKey("productId", "customerId");

                    b.HasIndex("customerId");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("Project.Data.Relation.Image", b =>
                {
                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.Property<int>("colorId")
                        .HasColumnType("int");

                    b.Property<string>("ImageData")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("productId", "colorId", "ImageData");

                    b.HasIndex("colorId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Project.Data.Relation.Notification", b =>
                {
                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.Property<string>("customerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("productId", "customerId");

                    b.HasIndex("customerId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Project.Data.Relation.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MerchantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("colorId")
                        .HasColumnType("int");

                    b.Property<int>("orderId")
                        .HasColumnType("int");

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.Property<int>("sizeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MerchantId");

                    b.HasIndex("colorId");

                    b.HasIndex("orderId");

                    b.HasIndex("productId");

                    b.HasIndex("sizeId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Project.Data.Relation.ProductDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("colorId")
                        .HasColumnType("int");

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.Property<int>("sizeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("colorId");

                    b.HasIndex("productId");

                    b.HasIndex("sizeId");

                    b.ToTable("ProductDetails");
                });

            modelBuilder.Entity("Project.Tables.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Project.Tables.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("Project.Tables.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeliveryId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Project.Tables.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Governorate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IMG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerificationCodeExpiry")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Person");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Project.Tables.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<double>("SellPrice")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.Property<int>("categoryId")
                        .HasColumnType("int");

                    b.Property<string>("merchantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("categoryId");

                    b.HasIndex("merchantId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Project.Tables.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Gradient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sizes");
                });

            modelBuilder.Entity("Project.Tables.Admin", b =>
                {
                    b.HasBaseType("Project.Tables.Person");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("NationalId")
                        .HasColumnType("bigint");

                    b.HasIndex("NationalId")
                        .IsUnique()
                        .HasFilter("[NationalId] IS NOT NULL");

                    b.ToTable("Admins", (string)null);
                });

            modelBuilder.Entity("Project.Tables.Customer", b =>
                {
                    b.HasBaseType("Project.Tables.Person");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("Project.Tables.DeliveryRep", b =>
                {
                    b.HasBaseType("Project.Tables.Person");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("NationalId")
                        .HasMaxLength(14)
                        .HasColumnType("bigint");

                    b.Property<string>("adminId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("NationalId")
                        .IsUnique()
                        .HasFilter("[NationalId] IS NOT NULL");

                    b.HasIndex("adminId");

                    b.ToTable("DeliveryReps", (string)null);
                });

            modelBuilder.Entity("Project.Tables.Merchant", b =>
                {
                    b.HasBaseType("Project.Tables.Person");

                    b.Property<DateTime>("CreatDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("NationalId")
                        .HasColumnType("bigint");

                    b.HasIndex("NationalId")
                        .IsUnique()
                        .HasFilter("[NationalId] IS NOT NULL");

                    b.ToTable("Merchants", (string)null);
                });

            modelBuilder.Entity("Project.Data.Relation.Cart", b =>
                {
                    b.HasOne("Project.Tables.Color", "color")
                        .WithMany("Carts")
                        .HasForeignKey("colorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project.Tables.Customer", "customer")
                        .WithMany("Carts")
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project.Tables.Product", "product")
                        .WithMany("Carts")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project.Tables.Size", "size")
                        .WithMany("Carts")
                        .HasForeignKey("sizeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("color");

                    b.Navigation("customer");

                    b.Navigation("product");

                    b.Navigation("size");
                });

            modelBuilder.Entity("Project.Data.Relation.EditCustomer", b =>
                {
                    b.HasOne("Project.Tables.Admin", "admin")
                        .WithMany("EditCustomers")
                        .HasForeignKey("adminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project.Tables.Customer", "customer")
                        .WithMany("editCustomers")
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("admin");

                    b.Navigation("customer");
                });

            modelBuilder.Entity("Project.Data.Relation.EditDelivery", b =>
                {
                    b.HasOne("Project.Tables.Admin", "admin")
                        .WithMany("EditDeliveries")
                        .HasForeignKey("adminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project.Tables.DeliveryRep", "delivery")
                        .WithMany("EditDeliveries")
                        .HasForeignKey("deliveryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("admin");

                    b.Navigation("delivery");
                });

            modelBuilder.Entity("Project.Data.Relation.EditMerchant", b =>
                {
                    b.HasOne("Project.Tables.Admin", "admin")
                        .WithMany("EditMerchants")
                        .HasForeignKey("adminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project.Tables.Merchant", "merchant")
                        .WithMany("editMerchants")
                        .HasForeignKey("merchantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("admin");

                    b.Navigation("merchant");
                });

            modelBuilder.Entity("Project.Data.Relation.EditOrder", b =>
                {
                    b.HasOne("Project.Tables.Admin", "admin")
                        .WithMany("EditOrders")
                        .HasForeignKey("adminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project.Tables.Order", "order")
                        .WithMany("EditOrders")
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("admin");

                    b.Navigation("order");
                });

            modelBuilder.Entity("Project.Data.Relation.FavMerchant", b =>
                {
                    b.HasOne("Project.Tables.Customer", "customer")
                        .WithMany("favMerchants")
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project.Tables.Merchant", "merchant")
                        .WithMany("FavMerchants")
                        .HasForeignKey("merchantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("merchant");
                });

            modelBuilder.Entity("Project.Data.Relation.FavProduct", b =>
                {
                    b.HasOne("Project.Tables.Customer", "customer")
                        .WithMany("favProducts")
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project.Tables.Product", "product")
                        .WithMany("favProducts")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("product");
                });

            modelBuilder.Entity("Project.Data.Relation.Feedback", b =>
                {
                    b.HasOne("Project.Tables.Customer", "customer")
                        .WithMany("feedbacks")
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project.Tables.Product", "product")
                        .WithMany("feedbacks")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("product");
                });

            modelBuilder.Entity("Project.Data.Relation.FeedbackComments", b =>
                {
                    b.HasOne("Project.Tables.Customer", "customer")
                        .WithMany("feedbackcmments")
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project.Tables.Product", "product")
                        .WithMany("feedbackcmments")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("product");
                });

            modelBuilder.Entity("Project.Data.Relation.History", b =>
                {
                    b.HasOne("Project.Tables.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project.Tables.Product", "product")
                        .WithMany()
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("product");
                });

            modelBuilder.Entity("Project.Data.Relation.Image", b =>
                {
                    b.HasOne("Project.Tables.Color", "color")
                        .WithMany("images")
                        .HasForeignKey("colorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project.Tables.Product", "product")
                        .WithMany("images")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("color");

                    b.Navigation("product");
                });

            modelBuilder.Entity("Project.Data.Relation.Notification", b =>
                {
                    b.HasOne("Project.Tables.Customer", "customer")
                        .WithMany("notifications")
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project.Tables.Product", "product")
                        .WithMany("notifications")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("product");
                });

            modelBuilder.Entity("Project.Data.Relation.OrderItem", b =>
                {
                    b.HasOne("Project.Tables.Merchant", "merchant")
                        .WithMany("orderItems")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project.Tables.Color", "color")
                        .WithMany("OrderItems")
                        .HasForeignKey("colorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project.Tables.Order", "order")
                        .WithMany("orderItems")
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project.Tables.Product", "product")
                        .WithMany("orderItems")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project.Tables.Size", "size")
                        .WithMany("orderItems")
                        .HasForeignKey("sizeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("color");

                    b.Navigation("merchant");

                    b.Navigation("order");

                    b.Navigation("product");

                    b.Navigation("size");
                });

            modelBuilder.Entity("Project.Data.Relation.ProductDetail", b =>
                {
                    b.HasOne("Project.Tables.Color", "color")
                        .WithMany("ProductDetails")
                        .HasForeignKey("colorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project.Tables.Product", "product")
                        .WithMany("ProductDetails")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project.Tables.Size", "size")
                        .WithMany("ProductDetails")
                        .HasForeignKey("sizeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("color");

                    b.Navigation("product");

                    b.Navigation("size");
                });

            modelBuilder.Entity("Project.Tables.Order", b =>
                {
                    b.HasOne("Project.Tables.Customer", "customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project.Tables.DeliveryRep", "deliveryrep")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("deliveryrep");
                });

            modelBuilder.Entity("Project.Tables.Product", b =>
                {
                    b.HasOne("Project.Tables.Category", "category")
                        .WithMany("products")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project.Tables.Merchant", "merchant")
                        .WithMany("products")
                        .HasForeignKey("merchantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("category");

                    b.Navigation("merchant");
                });

            modelBuilder.Entity("Project.Tables.Admin", b =>
                {
                    b.HasOne("Project.Tables.Person", null)
                        .WithOne()
                        .HasForeignKey("Project.Tables.Admin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project.Tables.Customer", b =>
                {
                    b.HasOne("Project.Tables.Person", null)
                        .WithOne()
                        .HasForeignKey("Project.Tables.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project.Tables.DeliveryRep", b =>
                {
                    b.HasOne("Project.Tables.Person", null)
                        .WithOne()
                        .HasForeignKey("Project.Tables.DeliveryRep", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Tables.Admin", "admin")
                        .WithMany("AddDeliveries")
                        .HasForeignKey("adminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("admin");
                });

            modelBuilder.Entity("Project.Tables.Merchant", b =>
                {
                    b.HasOne("Project.Tables.Person", null)
                        .WithOne()
                        .HasForeignKey("Project.Tables.Merchant", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project.Tables.Category", b =>
                {
                    b.Navigation("products");
                });

            modelBuilder.Entity("Project.Tables.Color", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductDetails");

                    b.Navigation("images");
                });

            modelBuilder.Entity("Project.Tables.Order", b =>
                {
                    b.Navigation("EditOrders");

                    b.Navigation("orderItems");
                });

            modelBuilder.Entity("Project.Tables.Product", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("ProductDetails");

                    b.Navigation("favProducts");

                    b.Navigation("feedbackcmments");

                    b.Navigation("feedbacks");

                    b.Navigation("images");

                    b.Navigation("notifications");

                    b.Navigation("orderItems");
                });

            modelBuilder.Entity("Project.Tables.Size", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("ProductDetails");

                    b.Navigation("orderItems");
                });

            modelBuilder.Entity("Project.Tables.Admin", b =>
                {
                    b.Navigation("AddDeliveries");

                    b.Navigation("EditCustomers");

                    b.Navigation("EditDeliveries");

                    b.Navigation("EditMerchants");

                    b.Navigation("EditOrders");
                });

            modelBuilder.Entity("Project.Tables.Customer", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("editCustomers");

                    b.Navigation("favMerchants");

                    b.Navigation("favProducts");

                    b.Navigation("feedbackcmments");

                    b.Navigation("feedbacks");

                    b.Navigation("notifications");
                });

            modelBuilder.Entity("Project.Tables.DeliveryRep", b =>
                {
                    b.Navigation("EditDeliveries");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Project.Tables.Merchant", b =>
                {
                    b.Navigation("FavMerchants");

                    b.Navigation("editMerchants");

                    b.Navigation("orderItems");

                    b.Navigation("products");
                });
#pragma warning restore 612, 618
        }
    }
}
